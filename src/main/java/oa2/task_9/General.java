package oa2.task_9;

import java.io.Serializable;

// Class 'General' explicitly extends 'java.lang.Object'
public class General implements Cloneable, Serializable {

    // копирование объекта

    /*
    Осуществляется посредством использования геттеров и сеттеров
     */


    // клонирование объекта

    /*
    Метод clone() является защищенным (protected) и не переопределен в подклассах Object по умолчанию. Чтобы объект
    класса мог быть клонирован, класс должен реализовывать интерфейс Cloneable. Если объект класса, который не реализует
    Cloneable, пытается вызвать clone(), будет выброшено исключение CloneNotSupportedException.

    Метод clone() по умолчанию выполняет поверхностное копирование. Это означает, что для всех полей объекта, которые
    сами являются объектами, копируются ссылки на эти объекты, а не сами объекты. В результате исходный объект и его
    клон будут ссылаться на одни и те же объекты в этих полях. Если требуется создать копии не только самого объекта, но
    и объектов, на которые он ссылается, необходимо переопределить метод clone(), где выполнить глубокое копирование
    вложенных объектов.
     */

    @Override
    public General clone() {
        try {
            return (General) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
    }


    // сравнение объектов (включая глубокий вариант)

    /*
    Достигается с помощью методов equals() и hashCode() класса Object. Глубокий вариант требуется реализовать
    самостоятельно при наличии полей в классе, которые должны быть задействованы в механизме сравнения.
     */


    // сериализация/десериализация

    /*
    Чтобы объект класса можно было сериализовать, класс должен реализовывать интерфейс java.io.Serializable. Этот
    интерфейс является маркерным (не содержит методов) и указывает JVM, что класс может быть сериализован.

    В некоторых случаях предпочтительнее использовать другие механизмы для сохранения состояния объектов, например JSON-
    или XML-сериализацию.
     */


    // печать

    /*
    Осуществляется посредством использования метода toString() класса Object и может при необходимости быть
    переопределен.
     */


    // проверка типа

    /*
    В Java для проверки, является ли объект экземпляром указанного класса, подкласса этого класса, или реализует ли он
    указанный интерфейс используется ключевое слово instanceof.
     */


    // получение реального типа объекта

    /*
    Осуществляется посредством использования метода getClass() класса Object.
     */
}

class Any extends General {
}